using System; // указывает на то, что мы обращаемся к пространству имен (namespace) System, предоставляемому ядром Microsoft .NET
using System.Collections.Generic; // пространство System.Collections.Generic содержит большой набор коллекций, которые позволяют удобно и эффективно решать широкий круг задач
using System.ComponentModel; // пространство имен System.ComponentModel определяет целый ряд атрибутов, позволяющих описать то, как должны вести себя ваши элементы управления в режиме проектирования
using System.Data; // классы для взаимодействия с базами данных
using System.Drawing; // классы для рисования на формах
using System.Linq; // набор функций, позволяющих писать структурированные типобезопасные запросы к локальным объектам-коллекциям и удаленным источникам данных
using System.Text; // для работы с текстом
using System.Threading.Tasks; // предоставляет поддержку создания и планирования объектов
using System.Windows.Forms; // пространство имен предоставляет различные классы элементов управления, которые можно использовать для создания многофункциональных пользовательских интерфейсов

namespace Добро_пожаловать //имя программы
{
    public partial class Form2 : Form // говорит о том, что код класса находится в нескольких файлах
    {
        //значение
        private int _ticks; // Private - закрытый доступ является уровнем доступа с минимальными правами. _ticks - возвращает число тактов, которое представляет дату и время этого экземпляра. Int - целочисленный тип данных
        private int _clicks; // Private - закрытый доступ является уровнем доступа с минимальными правами. _clicks - передается обработчику событий, поэтому оно указывает только на то, что произошел щелчок. Int - целочисленный тип данных

        //music
        System.Media.SoundPlayer player = new System.Media.SoundPlayer(); //Добавление саундплейера

        //label upgrade
        public int money = 0; // Общий доступ является уровнем доступа с максимальными правами. Деньги
        public int multi = 1; // Общий доступ является уровнем доступа с максимальными правами.
        public int upgradecost = 20; // Общий доступ является уровнем доступа с максимальными правами. Улучшение стоимость
        public int upgradecount = 0; // Общий доступ является уровнем доступа с максимальными правами. Улучшение
        public Form2() // публичный, общедоступный класс
        {
            InitializeComponent(); // метод, автоматически записываемый конструктором форм при создании / изменении форм
            player.SoundLocation = "MainMenuMusic.wav"; // путь к файлу для запуска WAV-файла

        }

        private void Form2_Load(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //наша форма
        }

        private void label1_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //time text
        }

        private void label6_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //upgrade button text
        }

        private void timer1_Tick(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            // timer
            _ticks++; // _ticks - возвращает число тактов, которое представляет дату и время этого экземпляра
            label1.Text = "Time:" + _ticks;  //возвращает текущее календарное время в секундах в label1

            if (_ticks == 22) // условный оператор if, он используется для определения того, будет ли выполняться определенный оператор или блок операторов. Т.е. наш _ticks закончится на 11 такте
            {
                timer1.Stop(); // метод используется для остановки таймера
                label1.Text = "Game Over!";//выводит текст на экран, когда игра окончена
                label2.Text = "Your Clicks: " + _clicks; // выводит текст на экран, когда вы набили сколько-то кликов
                _ticks = 0; // таймер остановиться когда такты на ноль
                _clicks = 0; // таймер остановиться когда клики на ноль
                MessageBox.Show("Время вышло!"); // отображает модальное диалоговое окно, содержащее значок системы, набор кнопок и краткое сообщение для конкретного приложения "Время закончилось"
            }

        }

        private void button1_Click(object sender, EventArgs e)
        {
            // cat-nlo
            timer1.Start(); // timer является компонентом для запуска действий, повторяющихся через определенный промежуток времени
            label2.Text = "Clicks: " + _clicks; //определяет, сколько раз была нажата и отпущена кнопка в label2
            _clicks++; // clicks++ вернет значение clicks до приращения

            //money
            money = money + multi; // деньги удваиваются за клик
            label7.Text = $"Money: {money}$"; // Задаём деньгам подсчёт

            //change cat (shop)
        }

        private void button4_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            // reset
            timer1.Stop(); //  метод используется для остановки таймера
            _clicks = 0; // таймер остановиться когда клики на ноль
            _ticks = 0; // таймер остановиться когда такты на ноль
            label1.Text = "Time: 10"; // можно сделать перезапуск в любое время до 10
            label2.Text = "Clicks: 0"; // можно сделать перезапуск в любое время
            label7.Text = "Money: 0$"; // при нажатии на перезапуск, деньги сбрасываются
            label10.Text = "Upgrade Cost: 20$"; // при перезапуске обновляется строка в свой вид
            label9.Text = "Upgrades Count: 0"; // при перезапуске обновляется строка в свой вид
            label8.Text = "Money Per Click: 1$"; // при перезапуске обновляется строка в свой вид
        }

        private void button2_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //play music
            player.Play(); //проигрыватель будет проигрывать музыку
        }

        private void label7_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {

        }

        private void button5_Click(object sender, EventArgs e)
        {
            //upgrade
            //Добавим функцию если недостаточно денег
            if (money > upgradecost - 1) // if используется для определения того, будет ли выполняться определенный оператор или блок операторов. 
            {
                money = money - upgradecost; //
                label7.Text = $"Money: {money}$"; // обновляем текст лейбла
                upgradecount++; // count () используется для подсчета количества раз, когда аргумент найден в наборе, связанном с функцией
                label9.Text = $"Upgrades Count: {upgradecount}"; // показ, сколько раз мы нажали на кнопку апгрейд
                upgradecost = upgradecost * 2; // при апгрейде наши деньги увеличиваются вдвое
                label10.Text = $"Upgrade Cost: {upgradecost}$"; //показ, сколько стоит апгрейд
                multi++; //деньги за клик
                label8.Text = $"Money Per Click: {multi}$"; //показывает сколько денег за клик выводится
            }
            else // Else используется, чтобы сказать компьютеру, какие инструкции нужно выполнить, если проверяемое утверждение было ложным
            {
                MessageBox.Show("У вас недостаточно денег!", "Ошибка"); //выведем сообщение на экран при недостатке денег
            }
        }

        private void label2_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //clicks text
        }

        private void label3_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //upgrade store text
        }

        private void label4_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //music text
        }

        private void label5_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //reset text
        }

        private void button3_Click(object sender, EventArgs e) // private - указывает на то, что класс доступен только внутри сборки. Использование слова void перед именем метода означает, что, когда завершается выполнение метода, возвращается пустое значение
        {
            //stop music
            player.Stop(); // проигрыватель остановит музыку
        }

        private void button6_Click(object sender, EventArgs e)
        {
            //shop
            new Form3(this).Show(); // мы теперь владельцы формы
            this.button1.ForeColor = System.Drawing.Color.LightBlue;

        }

        private void button7_Click(object sender, EventArgs e)
        {
            //exit
            Application.Exit();
        }
    }
}
